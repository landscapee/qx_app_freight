import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

println "青霄科技：项目根路径" + getRootProject().getProjectDir().absolutePath
def properties = new Properties()
def signProperties = new Properties()
def signFilePath = getRootProject().getProjectDir().absolutePath + File.separator + "sign.properties"
def RELEASE_PROPERTIES_EXIST = false;
File f = new File(signFilePath)
RELEASE_PROPERTIES_EXIST = f.exists()
if (!RELEASE_PROPERTIES_EXIST) {
    println "青霄科技：没有找到签名配置文件！\n--------------debug模式运行"
} else {
    println "青霄科技：找到签名配置文件sign.properties！\n--------------release模式运行"
}

static def getVersionName() {
    def sdf = new SimpleDateFormat("yyMMddHH")
    return sdf.format(new Date())
}

def auto_verison_name = getVersionName()

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "qx.app.freight.qxappfreight"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 20   //app根据此数字进行版本自动迭代 2019/08/22
        versionName "1.0_" + auto_verison_name

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    //配置签名文件
    if (RELEASE_PROPERTIES_EXIST) {
        signProperties.load(new FileInputStream(signFilePath))
        signingConfigs {
            release {
                signProperties.load(new FileInputStream(signFilePath))
                storeFile file(signProperties.get("file"))
                storePassword signProperties.get("password")
                keyAlias signProperties.get("alias")
                keyPassword signProperties.get("key_password")
            }
        }
    }

    buildTypes {

        release.initWith(buildTypes.debug)
        product.initWith(buildTypes.debug)

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //设置ip
            properties.load(new FileInputStream(getRootProject().getProjectDir().absolutePath + File.separator + "release.properties"))
            Set<String> keys = properties.keySet()
            for (String key : keys) {
                buildConfigField("String", key, "\"" + properties.get(key) + "\"")
            }
            //配置打包签名的信息
            if (RELEASE_PROPERTIES_EXIST) {
                signingConfig signingConfigs.release
            }
        }
        //测试环境(可调试)
//        debugRelease {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            //设置ip
//            properties.load(new FileInputStream(getRootProject().getProjectDir().absolutePath + File.separator + "release.properties"))
//            Set<String> keys = properties.keySet()
//            for (String key : keys) {
//                buildConfigField("String", key, "\"" + properties.get(key) + "\"")
//            }
//        }
        //测试环境
        //生产环境
        product {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //设置ip
            properties.load(new FileInputStream(getRootProject().getProjectDir().absolutePath + File.separator + "product.properties"))
            Set<String> keys = properties.keySet()
            for (String key : keys) {
                buildConfigField("String", key, "\"" + properties.get(key) + "\"")
            }
            //配置打包签名的信息
            if (RELEASE_PROPERTIES_EXIST) {
                signingConfig signingConfigs.release
            }
        }
        //开发环境
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //设置ip
            properties.load(new FileInputStream(getRootProject().getProjectDir().absolutePath + File.separator + "debug.properties"))
            Set<String> keys = properties.keySet()
            for (String key : keys) {
                buildConfigField("String", key, "\"" + properties.get(key) + "\"")
            }
        }

//        //生产环境(可调试)
//        debugProduct {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            //设置ip
//            properties.load(new FileInputStream(getRootProject().getProjectDir().absolutePath + File.separator + "product.properties"))
//            Set<String> keys = properties.keySet()
//            for (String key : keys) {
//                buildConfigField("String", key, "\"" + properties.get(key) + "\"")
//            }
//            //配置打包签名的信息
//            if (RELEASE_PROPERTIES_EXIST) {
//                signingConfig signingConfigs.release
//            }
//        }

    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.0.0'
            }
        }
    }
}

dependencies {
    implementation project(':gps_lib')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    //黄油刀
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    //dialog
    implementation 'me.drakeet.materialdialog:library:1.3.1'
    implementation 'com.github.rahatarmanahmed:circularprogressview:2.5.0'
    //二维码
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'cn.bingoogolapple:bga-qrcodecore:1.1.7@aar'
    implementation 'cn.bingoogolapple:bga-zxing:1.1.7@aar'
    //dex分包
    implementation 'com.android.support:multidex:1.0.3'
    //bugly
    implementation 'com.tencent.bugly:crashreport:2.8.6'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0'
    //图片选择
    implementation 'com.yongchun:com.yongchun.imageselector:1.1.0'
    implementation 'com.isseiaoki:simplecropview:1.0.13'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
//    implementation 'me.shaohui.advancedluban:library:1.3.5'
    //权限检测
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.3@aar'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.31'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation(name: 'Empty-release', ext: 'aar')
    api(name: 'imlibapi-freight', ext: 'aar')
    implementation 'com.jwenfeng.pulltorefresh:library:1.0.3'
    compileOnly 'org.projectlombok:lombok:1.18.4'
    implementation files('libs/afinal_0.5.1_bin.jar')
//    implementation 'com.alibaba:fastjson:1.2.44'
    implementation files('libs/autobahn-0.5.0.jar')
    //websocket STOMP 协议
    implementation 'com.github.NaikSoftware:StompProtocolAndroid:1.6.4'
    //implementation 'com.github.NaikSoftware:StompProtocolAndroid:{latest version}'
    //StompProtocolAndroid 依赖于webSocket的标准实现
    implementation 'org.java-websocket:Java-WebSocket:1.3.6'
    //图片多选框架
    implementation 'com.github.lovetuzitong:MultiImageSelector:1.2'
    implementation 'com.github.chrisbanes.photoview:library:1.2.4'
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'cn.bingoogolapple:bga-qrcodecore:1.1.7@aar'
    implementation 'cn.bingoogolapple:bga-zxing:1.1.7@aar'
    implementation 'com.contrarywind:Android-PickerView:4.1.4'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.github.hackware1993:MagicIndicator:1.6.0'
    implementation files('libs/nineoldandroids-2.4.0.jar')
    implementation 'com.github.donkingliang:LabelsView:1.4.1'
    implementation 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
}

build.doLast {
    println "===========================执行doLast============================="
    if (RELEASE_PROPERTIES_EXIST) {
        def SEPARATOR = File.separator
        def signApk_Release_dir = getRootProject().getProjectDir().absolutePath + SEPARATOR + "app" + SEPARATOR + "build" + SEPARATOR + "outputs" + SEPARATOR + "apk" + SEPARATOR + "release" + SEPARATOR + "app-release.apk"
        def signApk_Product_dir = getRootProject().getProjectDir().absolutePath + SEPARATOR + "app" + SEPARATOR + "build" + SEPARATOR + "outputs" + SEPARATOR + "apk" + SEPARATOR + "product" + SEPARATOR + "app-product.apk"

        def jar_dir = signProperties.get("jar")
        def pem_dir = signProperties.get("pem")
        def pk8_dir = signProperties.get("pk8")
        def destination_Release_dir = signProperties.get("destination") + new Date().format("yyyy-MM-dd-HH-mm-ss") + "-release.apk"
        def destination_Product_dir = signProperties.get("destination") + new Date().format("yyyy-MM-dd-HH-mm-ss") + "-product.apk"

        if (new File(signApk_Release_dir).exists() && new File(signApk_Product_dir)) {
            println "找到待签名文件[release] >>" + signApk_Release_dir
            println "找到待签名文件[product] >>" + signApk_Product_dir
        } else {
            println "待签名文件NOT FOUND >>" + signApk_Release_dir
            println "待签名文件NOT FOUND >>" + signApk_Product_dir
            println "………………………………………………加密异常退出………………………………………………"
            return
        }
        if (new File(jar_dir).exists()) {
            println "找到加密jar文件 >>" + jar_dir
        } else {
            println "加密jar文件 NOT FOUND >>" + jar_dir
            println "………………………………………………加密异常退出………………………………………………"
            return
        }
        if (new File(pem_dir).exists()) {
            println "找到加密pem文件 >>" + pem_dir
        } else {
            println "加密pem文件NOT FOUND >>" + pem_dir
            println "………………………………………………加密异常退出………………………………………………"
            return
        }
        if (new File(pk8_dir).exists()) {
            println "找到加密pk8文件 >> \n" + pk8_dir
        } else {
            println "加密pk8文件NOT FOUND >> \n" + pk8_dir
            println "………………………………………………加密异常退出………………………………………………"
            return
        }
        def executeReleaseStr = "java -jar " + jar_dir + " -w " + pem_dir + " " + pk8_dir + " " + signApk_Release_dir + " " + destination_Release_dir
        def executeProductStr = "java -jar " + jar_dir + " -w " + pem_dir + " " + pk8_dir + " " + signApk_Product_dir + " " + destination_Product_dir
        println "执行[Release & Product]：开始加密"
        println executeReleaseStr.execute().text.trim()
        println executeProductStr.execute().text.trim()

        if (new File(destination_Release_dir).exists()) {
            println "加密[Release]成功！>>" + destination_Release_dir
        } else {
            println "加密[Release]失败！！！！"
        }
        if (new File(destination_Product_dir).exists()) {
            println "加密[Product]成功！>>" + destination_Product_dir
        } else {
            println "加密[Product]失败！！！！"
        }
    } else {
        println "没有签名文件，不进行apk加密操作！！！！"
    }
    println "===========================执行doLast 结束============================="
}
